<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = room_width * .5
vertical_padding = 10;
current_index = 0
max_index = 2
menu_move_cooldown = room_speed * .2
clicked = false
delay = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///menu move cooldown
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !delay &amp;&amp; (clicked || keyboard_check_pressed(vk_enter) || keyboard_check_pressed(vk_space) || obj_input.keys[INPUT.BLINK])
{
    switch(current_index)
    {
        case 0:
            room_goto(START_ROOM)
        break;
        case 1:
            instance_create(0,0,obj_controls)
            instance_destroy()
        break;
        case 2:
            game_end()
        break;
    }
}
delay = false
if alarm[0] &gt; 0 exit
if obj_input.keys[INPUT.DOWN]
{
    if ++current_index &gt; max_index
        current_index = 0
    alarm[0] = menu_move_cooldown
}
else if obj_input.keys[INPUT.JUMP]
{
    if --current_index &lt; 0
        current_index = max_index
    alarm[0] = menu_move_cooldown
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y = 20
draw_text_transformed(x, y, "GAM", 2, 2, 0)
y += vertical_padding * 2

draw_text(x,y,"PLAY")
if mouse_check_button_pressed(mb_left) &amp;&amp; 
   point_in_rectangle(mouse_x,mouse_y,x - 40,y,x + 40,y + 5)
{
    clicked = true
    current_index = 0
}
y += vertical_padding

draw_text(x,y,"CONTROLS")
if mouse_check_button_pressed(mb_left) &amp;&amp; 
   point_in_rectangle(mouse_x,mouse_y,x - 40,y,x + 40,y + 5)
{
    clicked = true
    current_index = 1
}
y += vertical_padding

draw_text(x,y,"EXIT")
if mouse_check_button_pressed(mb_left) &amp;&amp; 
   point_in_rectangle(mouse_x,mouse_y,x - 40,y,x + 40,y + 5)
{
    clicked = true
    current_index = 2
}

var bounce = sin(2 * pi * (current_time mod 1000) / 1000) * 5

y = current_index * vertical_padding + 12 + vertical_padding * 3
draw_sprite(spr_menucursor,0,x - (40),y)
//draw_sprite_ext(spr_menucursor,0,x + (40),y,-1,1,0,c_white,1)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
