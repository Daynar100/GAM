<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_number(object_index) &gt; 1
{
    instance_destroy()
    exit
}

enum INPUT
{
    LEFT,
    RIGHT,
    DOWN,
    JUMP,
    BLINK
}

for(var i = 0; i &lt; INPUT.BLINK + 1; ++i)
{
    keys[i] = 0
}

ini_open("keybinds.ini") 

keybinds[INPUT.LEFT] = ini_read_real("keys","left",vk_left)
keybinds[INPUT.RIGHT] = ini_read_real("keys","right",vk_right)
keybinds[INPUT.DOWN] = ini_read_real("keys","down",vk_down)
keybinds[INPUT.JUMP] = ini_read_real("keys","jump",vk_up)
keybinds[INPUT.BLINK] = ini_read_real("keys","blink",ord("Z"))

ini_close()



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///refresh input

keys[INPUT.LEFT]    = keyboard_check(keybinds[INPUT.LEFT]) 
                    ||gamepad_axis_value(0, gp_axislh) &lt; -.2
keys[INPUT.RIGHT]   = keyboard_check(keybinds[INPUT.RIGHT])
                    ||gamepad_axis_value(0, gp_axislh) &gt; .2
keys[INPUT.DOWN]    = keyboard_check(keybinds[INPUT.DOWN])
                    ||gamepad_axis_value(0, gp_axislv) &gt; .2
keys[INPUT.JUMP]    = ((keyboard_check(keybinds[INPUT.JUMP])
                    ||gamepad_button_check(0, gp_face2))
                      //double jump capabilities
                      +
                      (keyboard_check_pressed(keybinds[INPUT.JUMP])
                      ||gamepad_button_check_pressed(0, gp_face2)
                      )
                      )
keys[INPUT.BLINK]   = keyboard_check(keybinds[INPUT.BLINK])
                      ||gamepad_button_check(0, gp_face1)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
